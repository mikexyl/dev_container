# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet hguard "hguard" b
#ifndef $1_$2_H_
#define $1_$2_H_

#endif  // $1_$2_H_

endsnippet

snippet todo "todo" b
// TODO(mikexyl): $1
endsnippet

snippet class "class" b
class $1{
  public:
    $1(){}
    virtual ~$1()=default;
};
endsnippet

snippet config "config" b
struct Config {
Config() {}
friend inline std::ostream& operator<<(std::ostream& s, const Config& v) {
s << std::endl
  << "$1 using Config:"<<std::endl
  << std::endl
  << "-------------------------------------------" << std::endl;
return (s);
}
};
static Config getConfigFromRosParam(const ros::NodeHandle& nh_private);
endsnippet

snippet rosparam "rosparam" b
${1: nh_private}.param("$2", config.$2, config.$2);
endsnippet

snippet get "get" b
auto const& get$1() const {return $2;}
endsnippet

snippet get "get" b
void set$1(const $2) {$3=$2;}
endsnippet

snippet main "main" b
#include <glog/logging.h>
#include <ros/ros.h>

int main(int argc, char** argv) {
  // Start logging
  google::InitGoogleLogging(argv[0]);
  google::ParseCommandLineFlags(&argc, &argv, false);
  google::InstallFailureSignalHandler();

  // Register with ROS master
  ros::init(argc, argv, "$1");

  // Create node handles
  ros::NodeHandle nh;
  ros::NodeHandle nh_private("~");

  $2 $3(nh, nh_private);

  // Spin
  ros::spin();

  // Exit normally
  return 0;
}
endsnippet
